package com.mp5a5.array.rotate;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

/**
 * 格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。
 * <p>
 * 给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。
 * <p>
 * 示例 1:
 * <p>
 * 输入: 2
 * 输出: [0,1,3,2]
 * 解释:
 * 00 - 0
 * 01 - 1
 * 11 - 3
 * 10 - 2
 * <p>
 * 对于给定的 n，其格雷编码序列并不唯一。
 * 例如，[0,2,3,1] 也是一个有效的格雷编码序列。
 * <p>
 * 00 - 0
 * 10 - 2
 * 11 - 3
 * 01 - 1
 * 示例 2:
 * <p>
 * 输入: 0
 * 输出: [0]
 * 解释: 我们定义格雷编码序列必须以 0 开头。
 *      给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。
 *      因此，当 n = 0 时，其格雷编码序列为 [0]。
 */
public class GrayCode_89 {

    // 动态规划

    /**
     * 思路：
     * 设 n 阶格雷码集合为G(n)，则G(n+1) 阶格雷码为：
     * 给 G(n) 阶格雷码每个元素二进制形式前面添加 0，得到 G'(n)
     * 设 G(n) 集合倒序（镜像）为 R(n)，给 R(n)每个元素二进制形式前面添加 1，得到 R'(n)
     * G(n+1) = G'(n) ∪ R'(n)拼接两个集合即可得到下一阶格雷码。
     * 根据以上规律，可从 0 阶格雷码推导致任何阶格雷码。
     * 代码解析：
     * 由于最高位前默认为 0，因此 G'(n) = G(n)，只需在 res(即 G(n))后添加 R'(n)即可；
     * 计算 R'(n)执行 head = 1 << i 计算出对应位数，以给 R(n) 前添加 1 得到对应 R'(n)
     * 倒序遍历 res(即 G(n))：依次求得 R'(n)各元素添加至 res 尾端，遍历完成后 res(即 G(n+1))。
     * <p>
     * <p>
     * 按照动态规划或者说递归的思路去想，也就是解决了小问题，怎么解决大问题。
     * <p>
     * 我们假设我们有了 n = 2 的解，然后考虑怎么得到 n = 3 的解。
     * <p>
     * n = 2 的解
     * 00 - 0
     * 10 - 2
     * 11 - 3
     * 01 - 1
     * 如果再增加一位，无非是在最高位增加 0 或者 1，考虑先增加 0。由于加的是 0，其实数值并没有变化。
     * <p>
     * n = 3 的解，最高位是 0
     * 000 - 0
     * 010 - 2
     * 011 - 3
     * 001 - 1
     * 再考虑增加 1，在 n = 2 的解基础上在最高位把 1 丢过去？
     * <p>
     * n = 3 的解
     * 000 - 0
     * 010 - 2
     * 011 - 3
     * 001 - 1
     * ------------- 下面的是新增的
     * 100 - 4
     * 110 - 6
     * 111 - 7
     * 101 - 5
     * <p>
     * 似乎没这么简单哈哈，第 4 行 001 和新增的第 5 行 100，有 3 个 bit 位不同了，当然不可以了。怎么解决呢？
     * <p>
     * 很简单，第 5 行新增的数据最高位由之前的第 4 行的 0 变成了 1，所以其它位就不要变化了，直接把第 4 行的其它位拉过来，也就是 101。
     * <p>
     * 接下来，为了使得第 6 行和第 5 行只有一位不同，由于第 5 行拉的第 4 行的低位，而第 4 行和第 3 行只有一位不同。所以第 6 行可以把第 3 行的低位拿过来。其他行同理，如下图。
     * <p>
     * 000 --------      1
     * 010          -    2
     * 011           -   3
     * 001            -  4
     * 101            -  5
     * 111           -   6
     * 110          -    7
     * 100 -------       8
     * <p>
     * 上半部分（1--4）由于最高位加的是 0 ，所以它的数值和 n = 2 的所有解的情况一样。而下半部分由于最高位加了 1，所以值的话，就是在其对应的值上加 4，也就是 2^2
     * ，即2^（3-1）也就是 1 << ( n - 1) 。所以我们的算法可以用迭代求出来了。
     * <p>
     * 所以如果知道了 n = 2 的解的话，如果是 { 0, 1, 3, 2}，那么 n = 3 的解就是 { 0, 1, 3, 2, 2 + 4, 3 + 4, 1 + 4, 0 + 4 }，即 { 0 1 3 2 6 7 5 4 }。之前的解直接照搬过来，然后倒序把每个数加上 1 << ( n - 1) 添加到结果中即可
     */
    public List<Integer> grayCode(int n) {
        List<Integer> res = new ArrayList<Integer>() {{
            add(0);
        }};

        int head = 1;
        for (int i = 0; i < n; i++) {
            for (int j = res.size() - 1; j >= 0; j--) {
                res.add(head + res.get(j));
            }
            head <<= 1;
        }
        return res;
    }

    /**
     * 关键是搞清楚格雷编码的生成过程, G(i) = i ^ (i/2);
     * 如 n = 3:
     * G(0) = 000,
     * G(1) = 1 ^ 0 = 001 ^ 000 = 001
     * G(2) = 2 ^ 1 = 010 ^ 001 = 011
     * G(3) = 3 ^ 1 = 011 ^ 001 = 010
     * G(4) = 4 ^ 2 = 100 ^ 010 = 110
     * G(5) = 5 ^ 2 = 101 ^ 010 = 111
     * G(6) = 6 ^ 3 = 110 ^ 011 = 101
     * G(7) = 7 ^ 3 = 111 ^ 011 = 100
     **/
    public List<Integer> grayCode1(int n) {
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < 1 << n; i++)
            res.add(i ^ i >> 1);
        return res;
    }

    @Test
    public void test() {
        grayCode(2);
    }
}
